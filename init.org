#+TITLE: Emacs Config
#+AUTHOR: David Hedin
#+EMAIL: david.hedin13@gmail.com

* Config bootstrapping
Bootstraps loading our emacs config from org files with babel src blocks.
The =(package-initialize)= is there because emacs requires this to be in your =init.el=.
This tangles =init.org= (this file) which will replace =init.el= and create =package.el=.
This ensures that this file and =init.el= are always in sync, but `init.el` has to exist for emacs to do this automatically.
We tangle then load separately because =org-babel-load-file= always tries to load the file with the same name (i.e. =init.el=) and we would be in a recursive loop.

#+begin_src emacs-lisp :tangle init.el
  (package-initialize)
  (require 'org)
  (org-babel-tangle-file
   (expand-file-name "init.org"
                     user-emacs-directory))
  (load-file "/home/david/.emacs.d/package.el")
#+end_src

** Custom Variable File
This moves all custom set variables to their own file instead of adding them to =init.el=.
This has the nice property of not wiping these out if/when we tangle these codeblocks to =init.el=, and generally keeps things cleaner
The =:noerror= prevents emacs from complaining if =custom.el= does not exist not already.
It will automatically be made once there are custom variables that need saving.
[[file:custom.el][Custom]]
#+begin_src emacs-lisp :tangle init.el
  (setq custom-file
        (expand-file-name "custom.el"
                          user-emacs-directory))
  (load custom-file :noerror)
#+end_src

** Package Manager
Adds the package repos I use, then bootstrap =use-package=.

#+begin_src emacs-lisp :tangle package.el
    (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                             ("marmalade" . "http://marmalade-repo.org/packages/")
                             ("melpa" . "http://melpa.milkbox.net/packages/")
                             ("org" . "https://orgmode.org/elpa/")))
    ;;(package-initialize)
    ;;(setq package-enable-at-startup nil)

    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (require 'use-package)
    (setq use-package-always-ensure t)
    ;; Only for testing init
    (setq use-package-verbose t)
#+end_src

* Config
The rest of the configuration is split into multiple files.

- [[file:editor.org][Editor]]: General changes to the editor
- [[file:org.org][Org]]: All org-mode related changes
- [[file:programming.org][Programming]]: Settings for specific programming modes
- [[file:templates.org][Templates]]: Templates and snippets


#+begin_src emacs-lisp :tangle init.el
  (org-babel-load-file
   (expand-file-name "editor.org"
                     user-emacs-directory))
  (org-babel-load-file
   (expand-file-name "org.org"
                     user-emacs-directory))
  (org-babel-load-file
   (expand-file-name "programming.org"
                     user-emacs-directory))
  (org-babel-load-file
   (expand-file-name "templates.org"
                     user-emacs-directory))
#+end_src

* Running Emacs
My preferred way to have emacs function is that when no emacs server is running, a new emacs server should be started, but if a server already exists, only a new frame should be created.
This has the functionality that once I have emacs open somewhere, opening new frames is quick and cheap, but when I close all eamcs frames, the emacs server shuts down completely.

#+begin_src emacs-lisp :tangle init.el
  (defun custom/last-frame-kill(frame)
    (if (= (length (frame-list)) 2) ; One for current frame and one for server
        (progn
          (save-some-buffers)
          (kill-emacs))))
  (add-to-list 'delete-frame-functions 'custom/last-frame-kill)
#+end_src

Emacs needs to be launched using this command
#+begin_src sh :tangle no
emacsclient --alternate-editor="" 
#+end_src

* To Do List
List of all of the todos for my config: [[file:todo.org][TODO]]
