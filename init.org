#+TITLE: Emacs Configuration
#+AUTHOR: David Hedin
#+SETUPFILE: ~/.emacs.d/org-theme.setup

* Org Mode Configuration Bootstrapping
Following the idea of literate programming, my emacs configuration is written in Org mode.
Org supports converting source code blocks to complete files (called 'tangling') that can then be interpreted by Emacs as configuration files.
We need only a very simple =init.el= file that can then chain tangling and loading the rest of the configuration from the other Org files.
Unfortunately it does mean that the =init.el= has to exist before we can do all this automatically.
The =init.org= parts of this file still get tangled into the =init.el=, replacing it, so they are kept in sync.

* Initial Bootstrap
The `(package-initialize)` is here because emacs requires this to be in your =init.el=.

#+begin_src emacs-lisp :tangle init.el
  (package-initialize)
  (require 'org)
  (org-babel-tangle-file
   (expand-file-name "init.org"
                     user-emacs-directory))
  (load-file
   (expand-file-name "package.el"
                     user-emacs-directory))
#+end_src

* Custom Variable File
This moves all custom set variables to their own file instead of adding them to =init.el=.
This has the nice property of not wiping these out if/when we tangle these codeblocks to =init.el=, and generally keeps things cleaner.
The =:noerror= prevents emacs from complaining if =custom.el= does not exist not already.
It will automatically be made once there are custom variables that need saving.

#+begin_src emacs-lisp :tangle init.el
  (setq custom-file
        (expand-file-name "custom.el"
                          user-emacs-directory))
  (load custom-file :noerror)
#+end_src

* Package Manager
This adds in package repositories available for Emacs, the boostraps loading the =use-package= package that is used for the rest of the package loading.
=use-package= has a nice =use-package-always-ensure= that saves having to type =:ensure t= on every package we want automatically installed (which is all of them).

#+begin_src emacs-lisp :tangle package.el
    (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                             ("marmalade" . "http://marmalade-repo.org/packages/")
                             ("melpa" . "https://melpa.org/packages/")
                             ("org" . "https://orgmode.org/elpa/")))

    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (require 'use-package)
    (setq use-package-always-ensure t)
    ;; Only for testing init
    ; (setq use-package-verbose t)
#+end_src

* Editor Configuration
General configuration of the emacs editor is [[file:editor.org][here]].

#+begin_src emacs-lisp :tangle init.el
  (org-babel-load-file
   (expand-file-name "editor.org"
                     user-emacs-directory))
#+end_src

* Org Configuration
Org is big enough that it gets its own configuration file [[file:org.org][here]].

#+begin_src emacs-lisp :tangle init.el
  (org-babel-load-file
   (expand-file-name "org.org"
                     user-emacs-directory))
#+end_src

* Programming Configuration
Configuration for programming and language specific packages is [[file:programming.org][here]].

#+begin_src emacs-lisp :tangle init.el
  (org-babel-load-file
   (expand-file-name "programming.org"
                     user-emacs-directory))
#+end_src

* Templates Configuration
All extra configuration for templates and snippets is [[file:templates.org][here]].

#+begin_src emacs-lisp :tangle init.el
  (org-babel-load-file
   (expand-file-name "templates.org"
                     user-emacs-directory))
#+end_src

* Running Emacs
Emacs runs as a user systemd service on my machine.
This has the functionality that opening new frames is quick and cheap, but when I close all emacs frames, the emacs server shuts down completely, clearing all open buffers and generally reducing bloat.
My emacs service is configured to automatically restart after closing, so by the time I need another frame, the emacs server has restarted.

#+begin_src emacs-lisp :tangle init.el
  (defun custom/last-frame-kill(frame)
    (if (= (length (frame-list)) 2) ; One for current frame and one for server
        (progn
          (save-some-buffers)
          (kill-emacs))))
  (add-to-list 'delete-frame-functions 'custom/last-frame-kill)
#+end_src

Emacs needs to be launched using this command:
#+begin_src sh :tangle no
emacsclient -c -a "emacs"
#+end_src

* To Do List
List of all of the todos for my config: [[file:todo.org][TODO]]
