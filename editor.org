#+TITLE: Editor
#+AUTHOR: David Hedin
#+SETUPFILE: ~/.emacs.d/org-theme.setup

* Theme
#+begin_src emacs-lisp :tangle yes
  (use-package zenburn-theme
    :config
    (load-theme 'zenburn t))
#+end_src

* Backups
Changes backup files location from the directory the original file is in to all being in the emacs directory. Also change emacs autosaves to be there too.
#+begin_src emacs-lisp :tangle yes
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+end_src

* Emacs Settings
** Automatically revert externally changed files
#+begin_src emacs-lisp :tangle yes
  (global-auto-revert-mode t)
#+end_src

** Change yes/no to y/n
#+begin_src emacs-lisp :tangle yes
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Enable local elisp eval
#+begin_src emacs-lisp :tangle yes
  (setq enable-local-eval 't)
#+end_src

** Delete highlighted text when typing
#+begin_src emacs-lisp :tangle yes
  (delete-selection-mode t)
  (transient-mark-mode t)
#+end_src

** Tab width changes
#+begin_src emacs-lisp :tangle yes
  (setq-default tab-width 2
                indent-tabs-mode nil)
  (setq indent-line-function 'insert-tab)
#+end_src

** Word wrap in text mode
#+begin_src emacs-lisp :tangle yes
  (add-hook 'text-mode-hook 'visual-line-mode)
#+end_src

** Show matching parentheses
#+begin_src emacs-lisp :tangle yes
  (show-paren-mode t)
#+end_src

* Keybindings
Easy bookmark access using =<f9>=.
#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "<f9>") 'list-bookmarks)
#+end_src

Delete up to the last non whitespace character.
#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "M-<backspace>") 'delete-indentation)
#+end_src

* Window Configuration
No toolbar, menubar, tooltip, scroll bar, or startup screen.

#+begin_src emacs-lisp :tangle yes
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (tooltip-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-screen t)
#+end_src

Show line numbers everywhere.
#+begin_src emacs-lisp :tangle yes
  (global-linum-mode 1)
#+end_src

** Mode Line
Display current time and cursor column number in mode line.
#+begin_src emacs-lisp :tangle yes
  (display-time-mode 1)
  (column-number-mode 1)
#+end_src

Use the =smart-mode-line= package.
I don't like the original color scheme, so I changed it to use the colors org uses.
#+begin_src emacs-lisp :tangle yes
  (use-package smart-mode-line-powerline-theme)
  (use-package smart-mode-line
    :custom
    (sml/theme 'powerline)
    (sml/no-confirm-load-theme t)
    :config
    (sml/setup)
    (set-face-attribute 'sml/prefix nil
                        :foreground (face-attribute 'org-level-1 :foreground))
    (set-face-attribute 'sml/folder nil
                        :foreground (face-attribute 'org-level-2 :foreground))
    (set-face-attribute 'sml/filename nil
                        :foreground (face-attribute 'org-level-3 :foreground))
    (set-face-attribute 'sml/position-percentage nil
                        :foreground (face-attribute 'sml/col-number :foreground))
    ; Convert file paths of ~/ws/abc/ to :WS:ABC:
    (add-to-list 'sml/replacer-regexp-list
               '("^~/ws/\\(\\w+\\)/"
                 (lambda (s) (concat ":" (upcase (match-string 1 s)) ":")))
               t)
    (add-to-list 'sml/replacer-regexp-list '("src/" "SRC:") t)
    (add-to-list 'sml/replacer-regexp-list '("include/" "INC:") t)
    ; Only show flycheck and flyspell minor modes on the mode line
    ; ADD PROJECTILE
    (setq rm-whitelist (mapconcat 'identity '("Fly" "FlyC") "\\\|")))
#+end_src

* Common Packages
These are common packages that are used everywhere in Emacs.
** Helm
Much better listing of mini-buffer choices.
#+begin_src emacs-lisp :tangle yes
  (use-package helm
    :bind (("M-x" . helm-M-x)
           ("M-y" . helm-show-kill-ring)
           ("C-x C-f" . helm-find-files)
           ("C-x b" . helm-buffers-list)
           :map helm-find-files-map
           ("C-s" . helm-ff-run-grep-ag)) ;; Search for string in files in directory
    :init
    (helm-mode 1)
    :config
    (helm-autoresize-mode 1)
    (setq helm-autoresize-max-height 30)
    (setq helm-autoresize-min-height 15)
    (setq helm-split-window-in-side-p t)
    :custom
    (helm-ff-lynx-style-map t)) ;; Allow arrow key navigation in ff buffer
#+end_src

** Helm Swoop
Better in-file searching, press the shortcut again to swoop all buffers in the same mode as the current one.
#+begin_src emacs-lisp :tangle yes
  (use-package helm-swoop
    :bind (("M-s" . helm-swoop-without-pre-input)
           :map isearch-mode-map
           ("M-s" . helm-swoop-from-isearch) ;; Pop from isearch into swoop
           :map helm-swoop-map
           ("M-s" . helm-multi-swoop-current-mode-from-helm-swoop)) ;; Swoop all buffers in same mode
    :config
    (setq helm-swoop-split-with-multiple-windows t))
    ;;(setq helm-swoop-use-fuzzy-match t)) ;; Fuzzy matching of search string
#+end_src

** Undo Tree
Visualize undos with a tree, replace normal emacs undo.
#+begin_src emacs-lisp :tangle yes
  (use-package undo-tree
    :config
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t))
#+end_src

** Auto Highlighting
Highlights the item under the cursor.
#+begin_src emacs-lisp :tangle yes
  (use-package auto-highlight-symbol
    :hook 
    (prog-mode . auto-highlight-symbol-mode)
    :custom
    (ahs-set-idle-interval 0.1))
#+end_src

** Auto Pair Mode
Auto pair parentheses, brackets, and quotes.
#+begin_src emacs-lisp :tangle yes
  (use-package autopair
    :custom
    (autopair-global-mode 1))
#+end_src

** Multiple Cursors
Crete multiple cursors for editing multiple lines at the same time.
#+begin_src emacs-lisp :tangle yes
  (use-package multiple-cursors
    :ensure t
    :bind (("C-\"" . mc/edit-lines)
           ("C->" . mc/mark-next-like-this-symbol)
           ("C-<" . mc/unmark-next-like-this)))
#+end_src

** Flyspell
Automatic spell checking.
#+begin_src emacs-lisp :tangle yes
  (use-package flyspell
    :hook
    ((text-mode . flyspell-mode)
    (prog-mode . flyspell-prog-mode)
    (org-mode . flyspell-mode)))

  (defun custom/flyspell-next-word()
    (interactive)
    (flyspell-goto-next-error)
    (flyspell-popup-correct))
  ;; Jump to next misspelled word and pop-up correction
  (use-package flyspell-popup
    :bind (:map flyspell-mode-map
                ("C-," . custom/flyspell-next-word)))
#+end_src

** Writegood
Mode that looks for weasel words, passive voice, and duplicate words.
#+begin_src emacs-lisp :tangle yes
  (use-package writegood-mode
    :hook
    ((text-mode . writegood-mode)
    (org-mode . writegood-mode))
    :custom-face
    (writegood-weasels-face ((t (:box (:line-width 2 :color "magenta" :style released-button)))))
    (writegood-passive-voice-face ((t (:box (:line-width 2 :color "cyan" :style released-button)))))
    (writegood-duplicates-face ((t (:box (:line-width 2 :color "red" :style released-button))))))
#+end_src

** Tramp
Remote file editing.
#+begin_src emacs-lisp :tangle yes
  (use-package tramp
    :config
    (setq tramp-default-method "ssh"))
#+end_src

** Multi-Term
Terminal emulator inside emacs.
#+begin_src emacs-lisp :tangle yes
  (setenv "TERM" "xterm-256color")
  (use-package multi-term
    :bind ("C-c t" . multi-term)
    :hook ((term-mode . (lambda ()
              (setq term-buffer-maximum-size 10000)))
           (term-mode . (lambda ()
              (yas-minor-mode -1)))))
#+end_src

* Custom Functions
** Better text kill
Override normal cut to take the whole line if nothing is selected.
#+begin_src emacs-lisp :tangle yes
  ; From http://ergoemacs.org/emacs/emacs_copy_cut_current_line.html
  (defun custom/kill-text-dwim ()
    (interactive)
    (if current-prefix-arg
        (progn ; not using kill-region because we don't want to include previous kill
          (kill-new (buffer-string))
          (delete-region (point-min) (point-max)))
      (progn (if (use-region-p)
                 (kill-region (region-beginning) (region-end) t)
               (kill-region (line-beginning-position) (line-beginning-position 2))))))
  (global-set-key (kbd "C-w") 'custom/kill-text-dwim)
#+end_src
