#+TITLE: Programming
#+AUTHOR: David Hedin
#+SETUPFILE: ~/.emacs.d/org-theme.setup

* Programming Mode Settings
General settings for programming in Emacs.

** Newline and indent on enter press
#+begin_src emacs-lisp :tangle yes
  (add-hook 'prog-mode-hook
            (lambda () (local-set-key (kbd "RET") 'newline-and-indent)))
#+end_src

** Better commenting
Cycles through different commenting styles.
#+begin_src emacs-lisp :tangle yes
  (use-package comment-dwim-2
    :bind ("M-;" . comment-dwim-2))
#+end_src

* Syntax Checking
Initial flycheck setup.

#+begin_src emacs-lisp :tangle yes
  (use-package flycheck
    :bind (:map flycheck-mode-map
                ("C-." . flycheck-next-error))
    :config
    (global-flycheck-mode 1))
#+end_src

* Language Server
Sets up language server for Emacs.

#+begin_src emacs-lisp :tangle yes
  (use-package lsp-mode
    :hook
    ((rust-mode . lsp)
    (c-mode . lsp))
    :commands lsp)

  (use-package lsp-ui
    :hook
    (lsp-mode . lsp-ui-mode)
    :commands lsp-ui-mode)
#+end_src

* Autocomplete
Use company for autocompletion.
#+begin_src emacs-lisp :tangle yes
  (use-package company
    :init
    (global-company-mode)
    :config
    (setq company-idle-delay 0.1)
    (setq company-minimum-prefix-length 2))
#+end_src

Company statistics puts more used completions first
#+begin_src emacs-lisp :tangle yes
  (use-package company-statistics
    :hook (company-mode . company-statistics-mode))
#+end_src

Company quickhelp shows docs about the currently selected completion candidate.
#+begin_src emacs-lisp :tangle yes
  (use-package company-quickhelp
    :hook (company-mode . company-quickhelp-mode)
    :config
    (setq company-quickhelp-delay 0)
    (setq company-quickhelp-use-propertized-text t))
#+end_src

Company integration with LSP.
#+begin_src emacs-lisp :tangle yes
  (use-package company-lsp
    :config
    (push 'company-lsp company-backends)
    :commands company-lsp)
#+end_src

* Highlighting
Rainbow delimiters changes the colors of braces and parentheses based on the nesting level.
FIC mode highlights =TODO= and =FIXME= in comments.
#+begin_src emacs-lisp :tangle yes
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  (use-package fic-mode
    :hook (prog-mode . fic-mode))
#+end_src

* Git
#+begin_src emacs-lisp :tangle yes
  ;; Magit: Git control
  (use-package magit
    :bind ("C-c g" . magit-status))
#+end_src

* General Mode Settings
Mode packages that don't require configuration.
#+begin_src emacs-lisp :tangle yes
  (use-package arduino-mode
    :mode "\\.ino\\'")
  (use-package cmake-mode
    :mode ("CMakeLists.txt" "\\.cmake\\'"))
  (use-package csv-mode
    :mode "\\.csv\\'")
  (use-package cuda-mode
    :mode "\\.cu\\'")
  (use-package glsl-mode
    :mode ("\\.vert\\'" "\\.frag\\'" "\\.glsl\\'" "\\.geom\\'"))
  (use-package json-mode
    :mode "\\.json\\'")
  (use-package julia-mode
    :mode "\\.jl\\'"
    :interpreter "julia")
  (use-package markdown-mode
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . gfm-mode)
           ("\\.markdown\\'" . markdown-mode)))
  (use-package syslog-mode
    :mode "/var/log.*\\'")
  (use-package systemd
    :mode ("\\.service\\'" . systemd-mode)
    :interpreter ("systemd" . systemd-mode))
  (use-package terraform-mode
    :mode "\\.tf\'")
  (use-package yaml-mode
    :mode "\\.yml\\'")
#+end_src

* C/C++
Extra C/C++ packages and configuration

Open .h files in C++ mode because that's usually what I'm using.
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
#+end_src

#+begin_src emacs-lisp :tangle yes
  (use-package ccls
    :config
    (setq ccls-executable "~/.emacs.d/lsp/ccls/build/ccls"))

  (use-package company-lsp
    :config
    (push 'company-lsp company-backends))

  (use-package lsp-ui
    :hook ((lsp-mode . lsp-ui-mode)
           (c++-mode-hook . lsp-ccls-enable)))
#+end_src


** Clang format/tidy

** C/C++
Preprocessor highlighting
#+begin_src emacs-lisp :tangle yes
    (use-package preproc-font-lock
      :custom
      (preproc-font-lock-global-mode 1))
#+end_src

Highlight newer C++ standards language
#+begin_src emacs-lisp :tangle yes
  (use-package modern-cpp-font-lock
    :hook ((c++-mode-hook . modern-c++-font-lock-mode)))
#+end_src

** CMake

#+begin_src emacs-lisp :tangle yes
  (use-package cmake-font-lock
    :hook ((cmake-mode . cmake-font-lock-activate)))
#+end_src


* LaTeX

#+begin_src emacs-lisp :tangle yes
;; LaTeX processing
(use-package tex-mik
  :ensure auctex
  :init
  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode))
#+end_src

* Rust

** New Computer Setup
`rustup` is the tool for managing Rust versions.
#+begin_src shell :tangle no
  curl https://sh.rustup.rs -sSf | sh
#+end_src

Will require a login to have the rust binaries added to `PATH` by default.

Tools for LSP integration.
#+begin_src shell :tangle no
  rustup component add rls rust-analysis rust-src
#+end_src

** Emacs Config
Rust mode setup, automatically run rustfmt on save.
#+begin_src emacs-lisp :tangle yes
  (use-package rust-mode
    :mode "\\.rs\\'"
    :bind (:map rust-mode-map
                ("<f10>" . rust-build)
                ("<f11>" . rust-test)
                ("<f12>" . rust-run))
    :config
    (setq rust-format-on-save t)
    (setq rust-rustfmt-bin "~/.cargo/bin/rustfmt"))
#+end_src

Rust's compilation model doesn't play nice with Flycheck by default, this package solves it.
#+begin_src emacs-lisp :tangle yes
  (use-package flycheck-rust
    :hook (rust-mode . flycheck-rust-setup))
#+end_src

Emacs control of rust's package and build system, cargo.
#+begin_src emacs-lisp :tangle yes
  ;; (use-package cargo
  ;;   :hook (rust-mode . cargo-minor-mode)
  ;;   :bind (:map rust-mode-map
  ;;               ("<f10>" . cargo-process-build)
  ;;               ("<f11>" . cargo-process-test)
  ;;               ("<f12>" . cargo-process-run)))
#+end_src
 
