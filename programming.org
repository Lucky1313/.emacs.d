#+TITLE: Programming
#+AUTHOR: David Hedin
#+EMAIL: david.hedin13@gmail.com

* Mode Packages

Packages for mode handling in various languages.

#+begin_src emacs-lisp :tangle yes
  (use-package arduino-mode
    :mode "\\.ino\\'")
  (use-package cmake-mode
    :mode ("CMakeLists\\.txt\\'" "\\.cmake\\'"))
  (use-package csv-mode
    :mode "\\.[Cc][Ss][Vv]\\'")
  (use-package cuda-mode
    :mode "\\.cu\\'")
  (use-package dockerfile-mode
    :mode "Dockerfile.*\\'")
  (use-package elixir-mode)
  (use-package git-modes)
  (use-package glsl-mode
    :mode ("\\.vert\\'" "\\.frag\\'" "\\.glsl\\'" "\\.geom\\'"))
  (use-package go-mode
    :mode "\\.go\\'")
  (use-package json-mode
    :mode "\\.json\\'")
  (use-package julia-mode
    :mode "\\.jl\\'"
    :interpreter "julia")
  (use-package just-mode
    :mode "justfile\\'")
  (use-package markdown-mode
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode)))
  (use-package python-mode)
  (use-package rust-mode
    :mode "\\.rs\\'")
  (use-package ssh-config-mode)
  (use-package systemd
    :mode "\\.service\\'"
    :interpreter ("systemd" . systemd-mode))
  (use-package syslog-mode
    :mode "/var/log.*\\'")
  (use-package terraform-mode
    :mode "\\.tf\\(vars\\)?\\'")
  (use-package toml-mode
    :mode "\\.toml\\'")
  (use-package yaml-mode
    :mode "\\.yml\\'")
#+end_src

* Github Co-Pilot setup

#+begin_src emacs-lisp :tangle yes
  (use-package copilot
    :straight (:host github :repo "zerolfx/copilot.el" :files ("dist" "*.el"))
    :hook (prog-mode . copilot-mode))
#+end_src

* LSP Server

#+begin_src emacs-lisp :tangle yes
  (use-package lsp-mode)
#+end_src

#+begin_src emacs-lisp :tangle yes
  (defun term-here ()
    (interactive)
    (call-process-shell-command
      (concat "gnome-terminal --working-directory=" default-directory) nil 0))

  (global-set-key (kbd "C-c t") 'term-here)
#+end_src

# * Programming Mode Settings
# General settings for programming in emacs

# ** Newline and indent on enter press
# #+begin_src emacs-lisp :tangle yes
#   (add-hook 'prog-mode-hook
#             (lambda () (local-set-key (kbd "RET") 'newline-and-indent)))
# #+end_src


# * Autocomplete
# Use company for autocompletion
# #+begin_src emacs-lisp :tangle yes
#   ;; Company: Autocompletion
#   (use-package company
#     ;; :hook ((prog-mode tex-mode) . company-mode)
#     ;; :init
#     ;; (add-hook 'prog-mode-hook 'company-mode)
#     ;; (add-hook 'tex-mode-hook 'company-mode)
#     :init
#     (global-company-mode)
#     :config
#     (setq company-idle-delay 0)
#     (setq company-minimum-prefix-length 2))

#   ;; Company-Statistics: Suggest most used completions first
#   (use-package company-statistics
#     :hook (company-mode . company-statistics-mode))
#     ;; :init
#     ;; (add-hook 'company-mode-hook 'company-statistics-mode))

#   ;; Company-Quickhelp: Add information about completions
#   (use-package company-quickhelp
#     :hook (company-mode . company-quickhelp-mode)
#     ;; :init
#     ;; (add-hook 'company-mode-hook 'company-quickhelp-mode)
#     :config
#     (setq company-quickhelp-delay 0)
#     (setq company-quickhelp-use-propertized-text t))
# #+end_src

# ** C/C++
# Specific autocomplete changes for C/C++
# #+begin_src emacs-lisp :tangle yes
#   ;; Company-C-Headers: Add c headers for autocompletion
#   (use-package company-c-headers
#     :config
#     (add-to-list 'company-backends 'company-c-headers)
#     (add-to-list 'company-c-headers-path-system "/usr/include/c++/5/"))
#   ;; Remove company-semantic from backends so that company-clang gets preference
#   ;;(setq company-backends (delete 'company-semantic company-backends))
# #+end_src

# *** RTags
# Uses rtags as a backend
# #+begin_src emacs-lisp :tangle yes
#   ;; Rtags: C/C++ Indexing
#   (use-package rtags
#     :hook ((c-mode c++-mode) . rtags-start-process-unless-running)
#     :bind (:map c-mode-base-map
#                 ("M-." . rtags-find-symbol-at-point)
#                 ("M-," . rtags-find-references-at-point)
#                 ("M-/" . rtags-find-symbol))
#     :config
#     ; Add C-c r bindings
#     (rtags-enable-standard-keybindings)
#     ; Add helm as results backend, requires helm-rtags
#     (setq rtags-display-result-backend 'helm)
#     ; Start diagnostics to error checking and completions
#     (rtags-diagnostics)
#     (setq rtags-autostart-diagnostics t)
#     (setq rtags-completions-enabled t)
#     (push 'company-rtags company-backends))

#    ;; Use helm for rtags
#    (use-package helm-rtags)

#    ;; ;; Company backend from rtags
#    ;; (use-package company-rtags
#    ;;  :init
#    ;;  (setq rtags-completions-enabled t)
#    ;;  (add-to-list 'company-backends 'company-rtags))

#    ;; Flycheck backend from rtags
#    (use-package flycheck-rtags)
# #+end_src

# * Syntax Checking
# Uses flycheck
# #+begin_src emacs-lisp :tangle yes
#   ;; Flycheck: Semantic checking
#   (use-package flycheck
#     :bind (:map flycheck-mode-map
#                 ("C-." . flycheck-next-error))
#     :config
#     (global-flycheck-mode 1))
# #+end_src

* Git

#+begin_src emacs-lisp :tangle yes
  ;; Magit: Git control
  (use-package magit
    :bind ("C-c g" . magit-status))
#+end_src

# * Highlighting

#   ;; Fic-mode: Highlights FIXMEs and TODOs
#   (use-package fic-mode
#     :hook (prog-mode . fic-mode))
#     ;; :init
#     ;; (add-hook 'prog-mode-hook 'fic-mode))
# #+end_src

# ** C/C++
# Preprocessor highlighting
# #+begin_src emacs-lisp :tangle yes
#     (use-package preproc-font-lock
#       :custom
#       (preproc-font-lock-global-mode 1))
# #+end_src

# Highlight newer C++ standards language
# #+begin_src emacs-lisp :tangle yes
#   (use-package modern-cpp-font-lock
#     :hook ((c++-mode-hook . modern-c++-font-lock-mode)))
# #+end_src

# ** CMake

# #+begin_src emacs-lisp :tangle yes
#   (use-package cmake-font-lock
#     :hook ((cmake-mode . cmake-font-lock-activate)))
# #+end_src

# * C/C++
# Extra C/C++ packages and configuration

# Open .h files in C++ mode because that's usually what I'm using.
# #+begin_src emacs-lisp :tangle yes
#   (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
# #+end_src

# ** Clang format/tidy
