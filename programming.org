#+TITLE: Programming
#+AUTHOR: David Hedin
#+SETUPFILE: ~/.emacs.d/org-theme.setup

* Programming Mode Settings
General settings for programming in Emacs.

** Newline and indent on enter press
#+begin_src emacs-lisp :tangle yes
  (add-hook 'prog-mode-hook
            (lambda () (local-set-key (kbd "RET") 'newline-and-indent)))
#+end_src

** Better commenting
Cycles through different commenting styles.
#+begin_src emacs-lisp :tangle yes
  (use-package comment-dwim-2
    :bind ("M-;" . comment-dwim-2))
#+end_src

* Syntax Checking
Initial flycheck setup.

#+begin_src emacs-lisp :tangle yes
  (use-package flycheck
    :bind (:map flycheck-mode-map
                ("C-." . flycheck-next-error))
    :config
    (global-flycheck-mode 1))
#+end_src

* Language Server
Sets up language server for Emacs.

#+begin_src emacs-lisp :tangle yes
  (use-package lsp-mode
    :hook
    (-mode . lsp)
    :commands lsp)

  (use-package lsp-ui
    :hook
    (lsp-mode . lsp-ui-mode)
    :commands lsp-ui-mode)
#+end_src

* Autocomplete
Use company for autocompletion.

#+begin_src emacs-lisp :tangle yes
  (use-package company
    :init
    (global-company-mode)
    :config
    (setq company-idle-delay 0.1)
    (setq company-minimum-prefix-length 2))

  ;; Company-Statistics: Suggest most used completions first
  (use-package company-statistics
    :hook (company-mode . company-statistics-mode))

  ;; Company-Quickhelp: Add information about completions
  (use-package company-quickhelp
    :hook (company-mode . company-quickhelp-mode)
    :config
    (setq company-quickhelp-delay 0)
    (setq company-quickhelp-use-propertized-text t))

  (use-package company-lsp
    :config
    (push 'company-lsp company-backends)
    :commands company-lsp)
#+end_src

* Highlighting
Rainbow delimiters changes the colors of braces and parentheses based on the nesting level.
FIC mode highlights =TODO= and =FIXME= in comments.
#+begin_src emacs-lisp :tangle yes
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  (use-package fic-mode
    :hook (prog-mode . fic-mode))
#+end_src

* Git
#+begin_src emacs-lisp :tangle yes
  ;; Magit: Git control
  (use-package magit
    :bind ("C-c g" . magit-status))
#+end_src

* General Mode Settings
Mode packages that don't require configuration.
#+begin_src emacs-lisp :tangle yes
  (use-package arduino-mode
    :mode "\\.ino\\'")
  (use-package cmake-mode
    :mode ("CMakeLists.txt" "\\.cmake\\'"))
  (use-package csv-mode
    :mode "\\.csv\\'")
  (use-package cuda-mode
    :mode "\\.cu\\'")
  (use-package glsl-mode
    :mode ("\\.vert\\'" "\\.frag\\'" "\\.glsl\\'" "\\.geom\\'"))
  (use-package json-mode
    :mode "\\.json\\'")
  (use-package julia-mode
    :mode "\\.jl\\'"
    :interpreter "julia")
  (use-package markdown-mode
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . gfm-mode)
           ("\\.markdown\\'" . markdown-mode)))
  (use-package rust-mode
    :mode "\\.rs\\'")
  (use-package syslog-mode
    :mode "/var/log.*\\'")
  (use-package systemd
    :mode ("\\.service\\'" . systemd-mode)
    :interpreter ("systemd" . systemd-mode))
  (use-package terraform-mode
    :mode "\\.tf\'")
  (use-package yaml-mode
    :mode "\\.yml\\'")
#+end_src

* C/C++
Extra C/C++ packages and configuration

Open .h files in C++ mode because that's usually what I'm using.
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
#+end_src

#+begin_src emacs-lisp :tangle yes
  (use-package ccls
    :config
    (setq ccls-executable "~/.emacs.d/lsp/ccls/build/ccls"))

  (use-package company-lsp
    :config
    (push 'company-lsp company-backends))

  (use-package lsp-ui
    :hook ((lsp-mode . lsp-ui-mode)
           (c++-mode-hook . lsp-ccls-enable)))
#+end_src


** Clang format/tidy

** C/C++
Preprocessor highlighting
#+begin_src emacs-lisp :tangle yes
    (use-package preproc-font-lock
      :custom
      (preproc-font-lock-global-mode 1))
#+end_src

Highlight newer C++ standards language
#+begin_src emacs-lisp :tangle yes
  (use-package modern-cpp-font-lock
    :hook ((c++-mode-hook . modern-c++-font-lock-mode)))
#+end_src

** CMake

#+begin_src emacs-lisp :tangle yes
  (use-package cmake-font-lock
    :hook ((cmake-mode . cmake-font-lock-activate)))
#+end_src


* LaTeX

#+begin_src emacs-lisp :tangle yes
;; LaTeX processing
(use-package tex-mik
  :ensure auctex
  :init
  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode))
#+end_src
