#+TITLE: Programming
#+AUTHOR: David Hedin

* Programming Mode Settings
General settings for programming in emacs

** Newline and indent on enter press
#+begin_src emacs-lisp :tangle yes
  (add-hook 'prog-mode-hook
            (lambda () (local-set-key (kbd "RET") 'newline-and-indent)))
#+end_src

** Better commenting
#+begin_src emacs-lisp :tangle yes
  (use-package comment-dwim-2
    :bind ("M-;" . comment-dwim-2))
#+end_src

* Mode Settings
Mode packages that don't require configuration
#+begin_src emacs-lisp :tangle yes
  (use-package markdown-mode
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode)))
  (use-package cuda-mode
    :mode "\\.cu\\'")
  (use-package julia-mode
    :mode "\\.jl\\'"
    :interpreter "julia")
  (use-package systemd
    :mode ("\\.service\\'" . systemd-mode)
    :interpreter ("systemd" . systemd-mode))
  (use-package syslog-mode
    :mode "/var/log.*\\'")
  (use-package arduino-mode
    :mode "\\.ino\\'")
  (use-package yaml-mode
    :mode "\\.yml\\'")
  (use-package glsl-mode
    :mode ("\\.vert\\'" "\\.frag\\'" "\\.glsl\\'" "\\.geom\\'"))
  (use-package csv-mode
    :mode "\\.csv\\'")
  (use-package json-mode
    :mode "\\.json\\'")
  (use-package cmake-mode
    :mode ("CMakeLists.txt" "\\.cmake\\'"))
#+end_src

* Autocomplete
Use company for autocompletion
#+begin_src emacs-lisp :tangle yes
  ;; Company: Autocompletion
  (use-package company
    ;; :hook ((prog-mode tex-mode) . company-mode)
    ;; :init
    ;; (add-hook 'prog-mode-hook 'company-mode)
    ;; (add-hook 'tex-mode-hook 'company-mode)
    :init
    (global-company-mode)
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 2))

  ;; Company-Statistics: Suggest most used completions first
  (use-package company-statistics
    :hook (company-mode . company-statistics-mode))
    ;; :init
    ;; (add-hook 'company-mode-hook 'company-statistics-mode))

  ;; Company-Quickhelp: Add information about completions
  (use-package company-quickhelp
    :hook (company-mode . company-quickhelp-mode)
    ;; :init
    ;; (add-hook 'company-mode-hook 'company-quickhelp-mode)
    :config
    (setq company-quickhelp-delay 0)
    (setq company-quickhelp-use-propertized-text t))
#+end_src

** C/C++
Specific autocomplete changes for C/C++
#+begin_src emacs-lisp :tangle yes
  ;; Company-C-Headers: Add c headers for autocompletion
  (use-package company-c-headers
    :config
    (add-to-list 'company-backends 'company-c-headers)
    (add-to-list 'company-c-headers-path-system "/usr/include/c++/5/"))
  ;; Remove company-semantic from backends so that company-clang gets preference
  ;;(setq company-backends (delete 'company-semantic company-backends))
#+end_src

#+begin_src emacs-lisp :tangle yes
  (use-package projectile)
#+end_src

*** RTags
Uses rtags as a backend
#+begin_src emacs-lisp :tangle yes
  ;; Rtags: C/C++ Indexing
  ;; (use-package rtags
  ;;   :hook ((c-mode c++-mode) . rtags-start-process-unless-running)
  ;;   :bind (:map c-mode-base-map
  ;;               ("M-." . rtags-find-symbol-at-point)
  ;;               ("M-," . rtags-find-references-at-point)
  ;;               ("M-/" . rtags-find-symbol))
  ;;   :config
  ;;   ; Add C-c r bindings
  ;;   (rtags-enable-standard-keybindings)
  ;;   ; Add helm as results backend, requires helm-rtags
  ;;   (setq rtags-display-result-backend 'helm)
  ;;   ; Start diagnostics to error checking and completions
  ;;   (rtags-diagnostics)
  ;;   (setq rtags-autostart-diagnostics t)
  ;;   (setq rtags-completions-enabled t)
  ;;   (push 'company-rtags company-backends))

  ;;  ;; Use helm for rtags
  ;;  (use-package helm-rtags)

  ;;  ;; ;; Company backend from rtags
  ;;  ;; (use-package company-rtags
  ;;  ;;  :init
  ;;  ;;  (setq rtags-completions-enabled t)
  ;;  ;;  (add-to-list 'company-backends 'company-rtags))

  ;;  ;; Flycheck backend from rtags
  ;;  (use-package flycheck-rtags)
#+end_src

* Syntax Checking
Uses flycheck
#+begin_src emacs-lisp :tangle yes
  ;; Flycheck: Semantic checking
  (use-package flycheck
    :bind (:map flycheck-mode-map
                ("C-." . flycheck-next-error))
    :config
    (global-flycheck-mode 1))
#+end_src

* Git

#+begin_src emacs-lisp :tangle yes
  ;; Magit: Git control
  (use-package magit
    :bind ("C-c g" . magit-status))
#+end_src

* Highlighting

#+begin_src emacs-lisp :tangle yes
  ;; Rainbow-delimiters: Rainbow colors for braces/parentheses
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
    ;; :init
    ;; (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))

  ;; Fic-mode: Highlights FIXMEs and TODOs
  (use-package fic-mode
    :hook (c-mode . fic-mode))
    ;; :init
    ;; (add-hook 'prog-mode-hook 'fic-mode))
#+end_src

** C/C++
Preprocessor highlighting
#+begin_src emacs-lisp :tangle yes
    (use-package preproc-font-lock
      :custom
      (preproc-font-lock-global-mode 1))
#+end_src

Highlight newer C++ standards language
#+begin_src emacs-lisp :tangle yes
  (use-package modern-cpp-font-lock
    :hook ((c++-mode-hook . modern-c++-font-lock-mode)))
#+end_src

** CMake

#+begin_src emacs-lisp :tangle yes
  (use-package cmake-font-lock
    :hook ((cmake-mode . cmake-font-lock-activate)))
#+end_src

* C/C++
Extra C/C++ packages and configuration

Open .h files in C++ mode because that's usually what I'm using.
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
#+end_src

#+begin_src emacs-lisp :tangle yes
  (use-package ccls
    :config
    (setq ccls-executable "~/.emacs.d/lsp/ccls/build/ccls"))

  (use-package company-lsp
    :config
    (push 'company-lsp company-backends))

  (use-package lsp-ui
    :hook ((lsp-mode . lsp-ui-mode)
           (c++-mode-hook . lsp-ccls-enable)))
#+end_src


** Clang format/tidy



* LaTeX

#+begin_src emacs-lisp :tangle yes
;; LaTeX processing
(use-package tex-mik
  :ensure auctex
  :init
  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode))
#+end_src
